package sohail;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Timer;
import java.util.Vector;

import javax.swing.JFrame;

// class GenzPanel<S extends Space,Transf>  !!
public class CopyOfGenzPanel<S extends Space,Transf> extends JFrame {

	//XSAace
	//private static final long serialVersionUID = 111111L;

	//Almost working:
	//	Vector<MyPoint<S>> points=new Vector<>();
	//	MyPoint<S> trypoint=new MyPoint<>();

	void addPoint(MouseEvent e){
		points.add(new MyPoint<GenzPanel.S>()); // !
		//p=new MyPoint<GenzPanel.S>();
		//p.x[0]=e.getPoint().x;
		//p.x[1]=e.getPoint().y;
		//points.add(p);
		points.lastElement().x[0]=e.getPoint().x;
		points.lastElement().x[1]=e.getPoint().y;
	}
	void tryPoint(MouseEvent e){
	}

	CopyOfGenzPanel(){
		this.setSize(600, 400);
		this.setVisible(true);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		this.addMouseListener(new MouseListener() {

			@Override
			public void mouseReleased(MouseEvent e) {
				untryPoint();

			}

			@Override
			public void mousePressed(MouseEvent e) {
				addPoint(e);

			}

			@Override
			public void mouseExited(MouseEvent e) {
				untryPoint();								
			}

			private void untryPoint() {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseEntered(MouseEvent e) {
				tryPoint(e);				
			}

			@Override
			public void mouseClicked(MouseEvent e) {
				addPoint(e);

			}
		});
	}

	public void paint(Graphics g){
		super.paint(g);

		//Timer.this
		g.drawOval(50,	 50, 10, (int) (10+Math.random()));

		repaint();
	}

}


